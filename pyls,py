import argparse
import os
from datetime import datetime

def getDescriptionsOfFilesInDir(dirname):
    """
    Lists the files and folders in the given directory
    and constructs a list of dicts with the required
    information. Always fetches all the details required for
    "long format" presentation for simplicity.

    dirname = The directory whose contents are to be listed.
    long_format = True if the user has asked for the long format.
    filetype = True if the user has asked for file type info as well.

    The return value is a list of dictionaries each with the following
    keys -
    "filename" = The name of the file.
    "filetype" = "d", "f", or "x" indicating "directory", "plain file",
                 or "executable file" respectively.
    "modtime" = Last modified time of the file as a `datetime` object.
    "filesize" = Number of bytes in the file.
    """

    # Ensure the argument represents an existing directory
    assert os.path.isdir(dirname), "dirname should be an existing directory"

    descriptions = []

    # Iterate over all items in the directory
    for entry in os.listdir(dirname):
        # Get full path of the item
        path = os.path.join(dirname, entry)

        # Check if it's a file or directory
        if os.path.isdir(path):
            filetype = "d"  # Directory
            filesize = 0  # Size is not relevant for directories
        elif os.path.isfile(path):
            filetype = "f"  # Plain file
            filesize = os.path.getsize(path)  # Size of the file
        else:
            continue  # Skip other types like symbolic links

        # Check if the file is executable
        if os.path.isfile(path) and os.access(path, os.X_OK):
            filetype = "x"  # Executable file

        # Get the last modified time
        modtime = datetime.fromtimestamp(os.path.getmtime(path)).replace(microsecond=0)

        # Append the description dictionary to the list
        descriptions.append({
            "modtime": modtime,
            "filesize": filesize,
            "filetype": filetype,
            "filename": entry
        })

    return descriptions

def formatResults(results, long_format, filetype):
    formatted_lines = []
    for result in results:
        line = result["filename"]

        if filetype:
            if result["filetype"] == "d":
                line += "/"
            elif result["filetype"] == "x":
                line += "*"
            else:
                print(line)

        if long_format:
            modtime_str = result["modtime"].strftime("%Y-%m-%d %H:%M:%S")
            line = f"{modtime_str}  {result['filesize']:>10}  {line}"

        formatted_lines.append(line)
    return formatted_lines

def main(args):
    file_descriptions = getDescriptionsOfFilesInDir(args.dirname)
    lines = formatResults(file_descriptions, args.long_format, args.filetype)

    for line in lines:
        print(line)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="pyls",
        description="Lists files in given or current directory",
        epilog="Poor man's ls",
    )

    parser.add_argument(
        "dirname",
        help="Name of directory to list the contents of",
        action="store",
        nargs="?",
        default=".",
    )

    parser.add_argument(
        "-l",
        "--long-format",
        help="Presents more details about files in columnar format",
        action="store_true",
    )

    parser.add_argument(
        "-F",
        "--filetype",
        help="Adds an extra character to the end of the printed filename that indicates its type.",
        action="store_true",
    )

    args = parser.parse_args()
    main(args)
